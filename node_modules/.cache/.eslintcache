[{"C:\\xnode\\apps\\YouMayNeedThis\\src\\index.js":"1","C:\\xnode\\apps\\YouMayNeedThis\\src\\App.js":"2","C:\\xnode\\apps\\YouMayNeedThis\\src\\components\\Navbar\\Navbar.js":"3","C:\\xnode\\apps\\YouMayNeedThis\\src\\components\\CartWidget\\CartWidget.js":"4","C:\\xnode\\apps\\YouMayNeedThis\\src\\components\\ItemCount\\ItemCount.js":"5","C:\\xnode\\apps\\YouMayNeedThis\\src\\components\\ItemList\\ItemList.js":"6","C:\\xnode\\apps\\YouMayNeedThis\\src\\components\\Item\\Item.js":"7","C:\\xnode\\apps\\YouMayNeedThis\\src\\views\\Home\\Home.js":"8","C:\\xnode\\apps\\YouMayNeedThis\\src\\views\\Products\\Products.js":"9","C:\\xnode\\apps\\YouMayNeedThis\\src\\views\\ProductDetail\\ProductDetail.js":"10","C:\\xnode\\apps\\YouMayNeedThis\\src\\CartContext.js":"11","C:\\xnode\\apps\\YouMayNeedThis\\src\\views\\Cart\\Cart.js":"12","C:\\xnode\\apps\\YouMayNeedThis\\src\\firebase\\firebase.config.js":"13","C:\\xnode\\apps\\YouMayNeedThis\\src\\components\\Footer\\Footer.js":"14"},{"size":284,"mtime":1637022495932,"results":"15","hashOfConfig":"16"},{"size":1564,"mtime":1637021994235,"results":"17","hashOfConfig":"16"},{"size":3539,"mtime":1636915307654,"results":"18","hashOfConfig":"16"},{"size":870,"mtime":1634778356654,"results":"19","hashOfConfig":"16"},{"size":2966,"mtime":1636915426441,"results":"20","hashOfConfig":"16"},{"size":1943,"mtime":1636914976358,"results":"21","hashOfConfig":"16"},{"size":684,"mtime":1635979821621,"results":"22","hashOfConfig":"16"},{"size":5308,"mtime":1637022647153,"results":"23","hashOfConfig":"16"},{"size":361,"mtime":1635807762488,"results":"24","hashOfConfig":"16"},{"size":2433,"mtime":1636915022669,"results":"25","hashOfConfig":"16"},{"size":966,"mtime":1635008166514,"results":"26","hashOfConfig":"16"},{"size":9841,"mtime":1637022371933,"results":"27","hashOfConfig":"16"},{"size":1069,"mtime":1635873872984,"results":"28","hashOfConfig":"16"},{"size":2263,"mtime":1637022304647,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"536fr",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\xnode\\apps\\YouMayNeedThis\\src\\index.js",["66"],"C:\\xnode\\apps\\YouMayNeedThis\\src\\App.js",[],["67","68"],"C:\\xnode\\apps\\YouMayNeedThis\\src\\components\\Navbar\\Navbar.js",["69","70","71"],"import React, { useState, useEffect } from 'react';\r\nimport logo from '../../logo.png';\r\nimport 'bootstrap/js/dist/dropdown';\r\nimport $ from 'jquery';\r\nimport { Link } from 'react-router-dom';\r\nimport { collection, getDocs } from '@firebase/firestore';\r\nimport { db } from '../../firebase/firebase.config';\r\n\r\n//components\r\nimport CartWidget from '../CartWidget/CartWidget'\r\n\r\n//custom styles\r\nconst logoStyle = {\r\n    maxWidth: '110px',\r\n    height: '100%',\r\n    borderRadius: '.5em',\r\n    marginLeft: '.5em'\r\n}\r\n\r\nconst Navbar = () => {\r\n    const[categories, setCategories] = useState([]);\r\n    const[dropdown, setDropdown] = useState(false);\r\n    const toggleOpen = () => setDropdown(!dropdown);\r\n    const closeDropdown = () => setDropdown(false);\r\n\r\n    useEffect(async () => {\r\n        const requestData = async () => {\r\n            const items = await getDocs(collection(db, 'products'));\r\n            const products = items.docs.map((doc) => {\r\n                return { ...doc.data(), id: doc.id }\r\n            });\r\n            \r\n            let cat_arr = [];\r\n            $.each(products, (i, obj) => {\r\n                if(!cat_arr.includes(obj.category)){\r\n                    cat_arr = [...cat_arr, obj.category];\r\n                }\r\n            });\r\n            setCategories(cat_arr);\r\n        }\r\n        requestData();\r\n    }, [/*when component did mount*/]); \r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <Link className=\"navbar-brand\" to=\"/\" onClick={closeDropdown}>\r\n                <img src={logo} style={logoStyle} />\r\n            </Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item active\">\r\n                        <Link className=\"nav-link\" to=\"/\" onClick={closeDropdown}>Inicio</Link>\r\n                    </li>\r\n                    <li className=\"nav-item dropdown\">\r\n                        <a className=\"nav-link dropdown-toggle\" href=\"#\" onClick={toggleOpen} id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        Productos\r\n                        </a>\r\n                        <div className={`dropdown-menu ${dropdown ? 'show' : ''}`} aria-labelledby=\"navbarDropdown\">\r\n                            <Link className=\"dropdown-item\" to=\"/Products\" onClick={toggleOpen}>Todos</Link>\r\n                            {categories.map((categ) => {\r\n                                const urlCateg = encodeURIComponent(categ);\r\n                                return(\r\n                                    <Link key={urlCateg} className=\"dropdown-item\" to={`/Products/${urlCateg}`} onClick={toggleOpen}>{categ}</Link>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/Cart\" onClick={closeDropdown}>\r\n                            <CartWidget itemsCount=\"0\" />\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","C:\\xnode\\apps\\YouMayNeedThis\\src\\components\\CartWidget\\CartWidget.js",[],"C:\\xnode\\apps\\YouMayNeedThis\\src\\components\\ItemCount\\ItemCount.js",["72","73","74"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ToastContainer, Toast } from 'react-bootstrap';\r\nimport { CartContext } from '../../CartContext';\r\n\r\nconst ItemCount = ({ productId }) => {\r\n    const [showA, setShowA] = useState(false);\r\n    const [counter, setCounter] = useState(0);\r\n    const [cartProducts, addProductToCart, removeItem] = useContext(CartContext);\r\n    const [qtyInCart, setQtyInCart] = useState(0);\r\n\r\n    const toggleShowA = () => setShowA(!showA);\r\n\r\n    const incrementCounter = () => {\r\n        setCounter(counter+1);\r\n    }\r\n\r\n    const decrementCounter = () => {\r\n        if(counter>0)\r\n            setCounter(counter-1);\r\n    }\r\n\r\n    const addToCart = () => {\r\n        if(counter > 0){\r\n            //event(counter);\r\n            addProductToCart(productId, counter);\r\n            //reset the counter\r\n            setCounter(0);\r\n        } else {\r\n            if(!showA)\r\n                toggleShowA();\r\n        }\r\n    }\r\n\r\n    const deleteFromCart = () => {\r\n        removeItem(productId);\r\n        setQtyInCart(0);\r\n    }\r\n\r\n    useEffect (() => {\r\n        const aux = cartProducts;\r\n        if(productId !== undefined && aux.find(x => x.id === productId) !== undefined)\r\n            setQtyInCart(aux.find(x => x.id === productId).quantity); \r\n    });\r\n\r\n    \r\n    if(qtyInCart > 0){\r\n        return (\r\n            <div>\r\n                <Link className=\"btn btn-outline-success\" to=\"/Cart\">Finalizar compra</Link>\r\n                <br/><br/>\r\n                <button className=\"btn btn-outline-danger btn-sm\" onClick={deleteFromCart}>Eliminar del carrito</button>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <ToastContainer position=\"top-end\" className=\"p-3\">\r\n                    <Toast show={showA} onClose={toggleShowA} bg=\"warning\" delay={3000} autohide>\r\n                        <Toast.Header>\r\n                            <img\r\n                            src=\"holder.js/20x20?text=%20\"\r\n                            className=\"rounded me-2\"\r\n                            alt=\"\"\r\n                            />\r\n                            <strong className=\"me-auto\">Atención</strong>\r\n                        </Toast.Header>\r\n                        <Toast.Body>Debes sumar al menos una unidad</Toast.Body>\r\n                    </Toast>\r\n                </ToastContainer>\r\n\r\n                <a onClick={decrementCounter}><i className=\"fa fa-minus fa-2x\"></i></a>&nbsp;\r\n                <input type=\"text\" value={counter} style={{width:'4em', textAlign:'center'}} readOnly />&nbsp;\r\n                <a onClick={incrementCounter}><i className=\"fa fa-plus fa-2x\"></i></a>\r\n    \r\n                <br/><br/>\r\n                <button className=\"btn btn-outline-primary\" onClick={addToCart}>Agregar al carrito</button>\r\n                <br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ItemCount\r\n","C:\\xnode\\apps\\YouMayNeedThis\\src\\components\\ItemList\\ItemList.js",["75","76","77","78","79","80"],"import React, { useState, useEffect } from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\nimport { collection, getDocs } from '@firebase/firestore';\r\nimport { db } from '../../firebase/firebase.config';\r\n\r\nimport Item from '../Item/Item';\r\n\r\n\r\nconst ItemList = ({ categ }) => {\r\n    const[allProducts, setAllProducts] = useState([]);\r\n    const[products, setProducts] = useState([]);\r\n    const[loading, setLoading] = useState(true);\r\n\r\n\r\n    const updFilteredCateg = (data = null) => {\r\n        let json = allProducts;\r\n        if(data != null)\r\n            json = data;\r\n\r\n        if(categ != \"\")\r\n            json = json.filter((element) => element.category == categ);\r\n\r\n        setProducts(json);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const requestData = async () => {\r\n\r\n            const items = await getDocs(collection(db, 'products'));\r\n            const products = items.docs.map((doc) => {\r\n                return { ...doc.data(), id: doc.id }\r\n            });\r\n            \r\n            setLoading(false);\r\n            setAllProducts(products);\r\n            updFilteredCateg(products);\r\n        }\r\n        requestData();\r\n    }, []); //when component did mount\r\n\r\n    useEffect(async () => {\r\n        updFilteredCateg();\r\n    }, [categ]); //when the get var category changes his value, update the visible product list\r\n\r\n    return (\r\n        <div style={{margin:'3%'}}>\r\n            <h4>CAT&Aacute;LOGO DE PRODUCTOS</h4>\r\n\r\n            <hr/><br/>\r\n\r\n            <Dimmer active={loading}>\r\n                <Loader />\r\n            </Dimmer>\r\n            <div className=\"ui centered cards\">\r\n                {products.map((item) => {\r\n                    return(\r\n                        <div key={item.id}>\r\n                            <Item data={item} />\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ItemList","C:\\xnode\\apps\\YouMayNeedThis\\src\\components\\Item\\Item.js",["81","82","83"],"import userEvent from '@testing-library/user-event'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Item = ({data}) => {\r\n    return (\r\n        <Link to={`/product-detail/${data.id}`}>\r\n            <div className=\"ui card\">\r\n                <div className=\"image\">\r\n                    <img src={data.image} />\r\n                </div>\r\n                <div className=\"content\">\r\n                    <a className=\"header\">{data.title}</a>\r\n                    <div className=\"description\">\r\n                    <b>$ {data.price}</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Item\r\n","C:\\xnode\\apps\\YouMayNeedThis\\src\\views\\Home\\Home.js",["84","85","86"],"C:\\xnode\\apps\\YouMayNeedThis\\src\\views\\Products\\Products.js",[],"C:\\xnode\\apps\\YouMayNeedThis\\src\\views\\ProductDetail\\ProductDetail.js",["87","88","89","90"],"import React, {useState, useEffect} from 'react'\r\nimport { Dimmer, Loader, Grid, Button } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { collection, getDocs } from '@firebase/firestore';\r\nimport { db } from '../../firebase/firebase.config';\r\n\r\n//components\r\nimport ItemCount from '../../components/ItemCount/ItemCount';\r\n\r\nconst ProductDetail = ({ match }) => {\r\n    const[product, setProduct] = useState([]);\r\n    const[loading, setLoading] = useState(true);\r\n\r\n    useEffect(async () => {\r\n        const requestData = async () => {\r\n\r\n            const items = await getDocs(collection(db, 'products'));\r\n            const products = items.docs.map((doc) => {\r\n                return { ...doc.data(), id: doc.id }\r\n            });\r\n\r\n            const product = products.find((prod) => prod.id === match.params.id);\r\n            setLoading(false);\r\n            setProduct(product);\r\n        }\r\n        requestData();\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{margin:'3%'}}>\r\n            <h4>DETALLES DEL PRODUCTO</h4>\r\n\r\n            <hr/>\r\n            <Link to=\"/Products\" style={{float:'left'}}>\r\n                <Button primary>ATR&Aacute;S</Button>\r\n            </Link>\r\n            <br/>\r\n\r\n            <Dimmer active={loading}>\r\n                <Loader />\r\n            </Dimmer>\r\n\r\n            <Grid style={{marginTop:'2em'}} doubling stackable>\r\n                <Grid.Column width={4}>\r\n                    <div className=\"ui centered card\" style={{padding:'1em'}}>\r\n                        <div className=\"image\">\r\n                            <img src={product.image} />\r\n                        </div>\r\n                        <div className=\"content\">\r\n                            <a className=\"header\">{product.title}</a>\r\n                            <div className=\"description\">\r\n                                <b>$ {product.price}</b>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <ItemCount productId={product.id} />\r\n                        </div>\r\n                    </div>\r\n                </Grid.Column>\r\n                <Grid.Column width={12}>\r\n                    <hr/>\r\n                    <p style={{textAlign:'left'}}>{product.description}</p>\r\n                    <hr/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductDetail\r\n","C:\\xnode\\apps\\YouMayNeedThis\\src\\CartContext.js",["91"],"import React, { useState, createContext } from 'react';\r\n\r\nexport const CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n    const [cartProducts, setCartProducts] = useState([]);\r\n\r\n    const addProductToCart = (id, qty) => {\r\n        //console.log(cartProducts);\r\n\r\n        if(cartProducts.find(x => x.id === id) !== undefined){\r\n            cartProducts.find(x => x.id === id).quantity = cartProducts.find(x => x.id === id).quantity + qty;\r\n        } else {\r\n            setCartProducts([...cartProducts, {'id': id, 'quantity': qty}]);\r\n        }\r\n    }\r\n\r\n    const removeItem = (id) => {\r\n        const filteredCart = cartProducts.filter(x => x.id != id);\r\n        setCartProducts(filteredCart);\r\n    }\r\n\r\n    const clearCart = () => {\r\n        setCartProducts([]);\r\n    }\r\n\r\n    return (\r\n\t\t<CartContext.Provider value={[cartProducts, addProductToCart, removeItem, clearCart]}>\r\n\t\t\t{children}\r\n\t\t</CartContext.Provider>\r\n\t);\r\n}","C:\\xnode\\apps\\YouMayNeedThis\\src\\views\\Cart\\Cart.js",["92","93","94","95"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { CartContext } from '../../CartContext';\r\nimport { Item, Dimmer, Loader, Form, Button, Modal } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { collection, getDocs, addDoc } from '@firebase/firestore';\r\nimport { db } from '../../firebase/firebase.config';\r\n\r\nconst Cart = () => {\r\n    const[productsInCart, setProductsInCart] = useState([]);\r\n    const[cartProducts, addProductToCart, removeItem, clearCart] = useContext(CartContext);\r\n    const[totalAmountOfCart, setTotalAmountOfCart] = useState(0);\r\n    const[loading, setLoading] = useState(true);\r\n    const[loadingPurchase, setLoadingPurchase] = useState(false);\r\n\r\n    const[buyerData, setBuyerData] = useState({\r\n        firstname: '',\r\n        lastname: '',\r\n        email: '',\r\n        phone: ''\r\n    });\r\n    const fieldChange = e => {\r\n        setBuyerData({...buyerData, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    const[openModalFP, setOpenModalFP] = useState(false);\r\n    const[openModalOrdNumb, setOpenModalOrdNumb] = useState(false);\r\n    const[orderRef, setOrderRef] = useState('');\r\n\r\n    useEffect(async () => {\r\n        let inCartProds = [];\r\n        let itemsProccessed = 0;\r\n        const requestData = async (item) => {\r\n            const items = await getDocs(collection(db, 'products'));\r\n            const products = items.docs.map((doc) => {\r\n                return { ...doc.data(), id: doc.id }\r\n            });\r\n\r\n            const product = products.find((prod) => prod.id === item.id);\r\n            product['quantity'] = item.quantity;\r\n            inCartProds.push(product);\r\n\r\n            //calculating the total price of the purchase\r\n            let totalAmount = 0;\r\n            inCartProds.forEach(item => {\r\n                totalAmount += item.price * item.quantity;\r\n            });\r\n            setTotalAmountOfCart(totalAmount);\r\n\r\n            itemsProccessed++\r\n            if(itemsProccessed >= cartProducts.length)\r\n                setProductsInCart(inCartProds);\r\n        }\r\n        \r\n        await cartProducts.forEach(item => {\r\n            requestData(item).then(() => {\r\n                setLoading(false);\r\n            });\r\n        });\r\n\r\n        if(cartProducts.length == 0)\r\n            setLoading(false);\r\n    }, [cartProducts]);\r\n\r\n    const removeSpecificItem = (id) => {\r\n        setLoading(true);\r\n        if(cartProducts.length == 1) //si es el ultimo item, lo elimino vaciando el carrito\r\n            clearLocalCart();\r\n        else\r\n            removeItem(id);\r\n    }\r\n\r\n    const clearLocalCart = () => {\r\n        clearCart()\r\n        setProductsInCart([]);\r\n    }\r\n\r\n    const finishPurchase = () => {\r\n        setOpenModalFP(true);\r\n    }\r\n\r\n    const confirmPurchase = async () => {\r\n        setLoadingPurchase(true);\r\n\r\n        let confirmedItems = [];\r\n        productsInCart.forEach(item => {\r\n            confirmedItems.push({\r\n                id: item.id,\r\n                price: item.price,\r\n                title: item.title,\r\n                quantity: item.quantity\r\n            });\r\n        })\r\n        \r\n        const buyerRef = await addDoc(collection(db, 'buyer'), {\r\n            date: new Date(),\r\n            email: buyerData.email,\r\n            lastname: buyerData.lastname,\r\n            name: buyerData.firstname,\r\n            phone: buyerData.phone,\r\n            total: totalAmountOfCart,\r\n            items: { confirmedItems }\r\n        });\r\n\r\n        //cleaning the buyer data\r\n        setBuyerData({\r\n            firstname: '',\r\n            lastname: '',\r\n            email: '',\r\n            phone: ''\r\n        });\r\n\r\n        setLoadingPurchase(false);\r\n        setOpenModalFP(false);\r\n\r\n        setOrderRef(buyerRef.id);\r\n        setOpenModalOrdNumb(true);\r\n    }\r\n\r\n    const closePurchaseDetails = () => {\r\n        //clear cart after purchasing\r\n        clearCart()\r\n        setProductsInCart([]);\r\n\r\n        setOrderRef('');\r\n        setOpenModalOrdNumb(false);\r\n    }\r\n    \r\n    if(productsInCart.length > 0){\r\n        return (\r\n            <div style={{margin:'3%'}}>\r\n                <Dimmer active={loading}>\r\n                    <Loader />\r\n                </Dimmer>\r\n                <h4>PRODUCTOS EN TU CARRITO</h4>\r\n                <Item.Group>\r\n                    {productsInCart.map((cartItem) => {\r\n                        return(\r\n                            <div key={cartItem.id}>\r\n                                <hr/>\r\n                                <Item>\r\n                                    <Item.Image size='tiny' src={cartItem.image} circular />\r\n                                    <Item.Content>\r\n                                        <Link to={`/product-detail/${cartItem.id}`}>{cartItem.title}</Link>\r\n                                        <Item.Meta><b>Cantidad: {cartItem.quantity}</b></Item.Meta>\r\n                                        <Item.Description>\r\n                                            <p>$ {cartItem.price}</p>\r\n                                        </Item.Description>\r\n                                        <br/>\r\n                                        <Item.Extra>\r\n                                            <button className=\"btn btn-outline-secondary btn-sm\" onClick={() => removeSpecificItem(cartItem.id)}>Eliminar del carrito</button>\r\n                                        </Item.Extra>\r\n                                    </Item.Content>\r\n                                </Item>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </Item.Group>\r\n\r\n                <hr/>\r\n                <div style={{fontSize:\"110%\"}}>\r\n                    <span style={{color:\"#42A928\"}}>¡ENV&Iacute;O GRATIS!</span><br/>\r\n                    <span style={{fontSize:\"80%\"}}>*A TODO EL PA&Iacute;S</span>\r\n                </div>\r\n                <hr/>\r\n                <h5>TOTAL: ${totalAmountOfCart}</h5>\r\n                <br/>\r\n                <button className=\"btn btn-outline-success\" onClick={finishPurchase}>Finalizar compra</button>\r\n                <br/><br/>\r\n                <button className=\"btn btn-outline-danger btn-sm\" onClick={clearLocalCart}>Vaciar carrito</button>\r\n                <br/>\r\n\r\n                <Modal\r\n                    size='tiny'\r\n                    dimmer='blurring'\r\n                    open={openModalFP}\r\n                    closeOnDimmerClick={false}\r\n                    onClose={() => setOpenModalFP(false)}\r\n                >\r\n                    <Modal.Header>Confirmar compra</Modal.Header>\r\n                    <Modal.Content>\r\n                        <h5>Completa tus datos y confirma que deseas finalizar la compra para generar tu numero de orden</h5>\r\n                        <hr/>\r\n                        <Form>\r\n                            <Form.Field>\r\n                                <label>Nombre</label>\r\n                                <input placeholder='Nombre' name='firstname' onChange={fieldChange} />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>Apellido</label>\r\n                                <input placeholder='Apellido' name='lastname' onChange={fieldChange} />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>Email</label>\r\n                                <input type=\"email\" placeholder='Email' name='email' onChange={fieldChange} />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>Teléfono</label>\r\n                                <input placeholder='Fijo o celular' name='phone' onChange={fieldChange} />\r\n                            </Form.Field>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button negative onClick={() => setOpenModalFP(false)} disabled={loadingPurchase}>\r\n                            Cancelar\r\n                        </Button>\r\n                        <Button positive onClick={confirmPurchase} loading={loadingPurchase}>\r\n                            Confirmar\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    size='tiny'\r\n                    dimmer='blurring'\r\n                    open={openModalOrdNumb}\r\n                    closeOnDimmerClick={false}\r\n                    onClose={closePurchaseDetails}\r\n                >\r\n                    <Modal.Header>Se confirmó tu compra</Modal.Header>\r\n                    <Modal.Content>\r\n                        <p>\r\n                            Tu orden de compra es: <b>{orderRef}</b>\r\n                            <hr/>\r\n                            Te enviamos un correo con los detalles de tu compra. ¡Muchas gracias!\r\n                        </p>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button positive onClick={closePurchaseDetails}>\r\n                            Aceptar\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div style={{margin:'3%'}}>\r\n                <Dimmer active={loading}>\r\n                    <Loader />\r\n                </Dimmer>\r\n                <h4>NO HAY PRODUCTOS EN TU CARRITO :(</h4>\r\n                <hr/>\r\n                <Link className=\"nav-link\" to=\"/products\">\r\n                    <Button color='green' icon='cart' label={{ basic: true, color: 'green', pointing: 'left', content: 'Ve a elegir productos!' }} />\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cart\r\n","C:\\xnode\\apps\\YouMayNeedThis\\src\\firebase\\firebase.config.js",[],"C:\\xnode\\apps\\YouMayNeedThis\\src\\components\\Footer\\Footer.js",[],{"ruleId":"96","severity":1,"message":"97","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":9},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":26,"column":15,"nodeType":"106","endLine":42,"endColumn":6},{"ruleId":"107","severity":1,"message":"108","line":47,"column":17,"nodeType":"109","endLine":47,"endColumn":53},{"ruleId":"110","severity":1,"message":"111","line":58,"column":25,"nodeType":"109","endLine":58,"endColumn":195},{"ruleId":"104","severity":1,"message":"112","line":40,"column":5,"nodeType":"98","endLine":40,"endColumn":14,"suggestions":"113"},{"ruleId":"110","severity":1,"message":"114","line":72,"column":17,"nodeType":"109","endLine":72,"endColumn":47},{"ruleId":"110","severity":1,"message":"114","line":74,"column":17,"nodeType":"109","endLine":74,"endColumn":47},{"ruleId":"115","severity":1,"message":"116","line":20,"column":18,"nodeType":"117","messageId":"118","endLine":20,"endColumn":20},{"ruleId":"115","severity":1,"message":"119","line":21,"column":62,"nodeType":"117","messageId":"118","endLine":21,"endColumn":64},{"ruleId":"104","severity":1,"message":"105","line":26,"column":15,"nodeType":"106","endLine":39,"endColumn":6},{"ruleId":"104","severity":1,"message":"120","line":39,"column":8,"nodeType":"121","endLine":39,"endColumn":10,"suggestions":"122"},{"ruleId":"104","severity":1,"message":"105","line":41,"column":15,"nodeType":"106","endLine":43,"endColumn":6},{"ruleId":"104","severity":1,"message":"120","line":43,"column":8,"nodeType":"121","endLine":43,"endColumn":15,"suggestions":"123"},{"ruleId":"96","severity":1,"message":"124","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":17},{"ruleId":"107","severity":1,"message":"108","line":10,"column":21,"nodeType":"109","endLine":10,"endColumn":45},{"ruleId":"110","severity":1,"message":"114","line":13,"column":21,"nodeType":"109","endLine":13,"endColumn":43},{"ruleId":"96","severity":1,"message":"125","line":2,"column":53,"nodeType":"98","messageId":"99","endLine":2,"endColumn":58},{"ruleId":"96","severity":1,"message":"126","line":9,"column":27,"nodeType":"98","messageId":"99","endLine":9,"endColumn":44},{"ruleId":"104","severity":1,"message":"105","line":20,"column":15,"nodeType":"106","endLine":33,"endColumn":6},{"ruleId":"104","severity":1,"message":"105","line":14,"column":15,"nodeType":"106","endLine":27,"endColumn":6},{"ruleId":"104","severity":1,"message":"127","line":27,"column":8,"nodeType":"121","endLine":27,"endColumn":10,"suggestions":"128"},{"ruleId":"107","severity":1,"message":"108","line":47,"column":29,"nodeType":"109","endLine":47,"endColumn":56},{"ruleId":"110","severity":1,"message":"114","line":50,"column":29,"nodeType":"109","endLine":50,"endColumn":51},{"ruleId":"115","severity":1,"message":"116","line":19,"column":60,"nodeType":"117","messageId":"118","endLine":19,"endColumn":62},{"ruleId":"96","severity":1,"message":"129","line":10,"column":25,"nodeType":"98","messageId":"99","endLine":10,"endColumn":41},{"ruleId":"104","severity":1,"message":"105","line":29,"column":15,"nodeType":"106","endLine":62,"endColumn":6},{"ruleId":"115","severity":1,"message":"119","line":60,"column":32,"nodeType":"117","messageId":"118","endLine":60,"endColumn":34},{"ruleId":"115","severity":1,"message":"119","line":66,"column":32,"nodeType":"117","messageId":"118","endLine":66,"endColumn":34},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","no-native-reassign",["130"],"no-negated-in-lhs",["131"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","React Hook useEffect contains a call to 'setQtyInCart'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [cartProducts, productId] as a second argument to the useEffect Hook.",["132"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'updFilteredCateg'. Either include it or remove the dependency array.","ArrayExpression",["133"],["134"],"'userEvent' is defined but never used.","'Image' is defined but never used.","'setSliderSettings' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.",["135"],"'addProductToCart' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Add dependencies array: [cartProducts, productId]",{"range":"144","text":"145"},"Update the dependencies array to be: [updFilteredCateg]",{"range":"146","text":"147"},"Update the dependencies array to be: [categ, updFilteredCateg]",{"range":"148","text":"149"},"Update the dependencies array to be: [match.params.id]",{"range":"150","text":"151"},[1347,1347],", [cartProducts, productId]",[1167,1169],"[updFilteredCateg]",[1267,1274],"[categ, updFilteredCateg]",[958,960],"[match.params.id]"]